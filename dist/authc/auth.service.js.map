{"version":3,"sources":["../app/authc/auth.service.ts"],"names":[],"mappings":"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","file":"auth.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Headers, Http, RequestOptions, Response } from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/delay';\n\nimport { Credentials } from './credentials';\n\nimport { httpHeaders } from '../global.constants'\n\n@Injectable() \nexport class AuthService {\n\n    private authcUrl = '/api/authc/login'\n\n    private authCredentials: Credentials;\n\t\n\tisLoggedIn: boolean;\n\n\tredirectUrl: string;\n\n\tapitoken: string;\n\n\tconstructor(private http: Http) {}\n\n\tlogin(username:string, password:string): Observable<boolean> {\n\t\t\n\t\tlet cred: Credentials = new Credentials(username, password, '', this.uuid());\n\t\tlet body = JSON.stringify(cred);\n\t\tlet headers = new Headers(httpHeaders);\n\t\tlet options = new RequestOptions({ headers: headers });\n\n\t\treturn this.http.post(this.authcUrl, body, options)\n\t\t\t.map((res: Response) => {\n\t\t\t\tlet data = res.json();\n\t\t\t\tif (data.apiKey) {\n\t\t\t\t\t//this.apitoken = data.apiKey;\n\t\t\t\t\tthis.isLoggedIn = true;\n\t\t\t\t\tthis.authCredentials = new Credentials(username, '', data.apiKey, '');\n\t\t\t\t}\n\t\t\t\treturn Observable.of(this.isLoggedIn);\n\t\t\t}).catch(this.handleError);\n\t}\n\n\tlogout(): void {\n\t\tthis.isLoggedIn = false;\n\t}\n\n\tprivate handleError (error: Response | any) {\n\t\t// In a real world app, we might use a remote logging infrastructure\n\t\tlet errMsg: string;\n\t\tif (error instanceof Response) {\n\t\t\tconst body = error.json() || '';\n\t\t\tconst err = body.error || JSON.stringify(body);\n\t\t\terrMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n\t\t} else {\n\t\t\terrMsg = error.message ? error.message : error.toString();\n\t\t}\n\t\tconsole.error(errMsg);\n\t\treturn Observable.throw(errMsg);\n\t}\n\n\tpublic getAuthenticatedCredentials(): Credentials {\n\t\treturn this.authCredentials;\n\t}\n\n\tprivate uuid(): string {\n\t\tlet d = new Date().getTime();\n    \tvar uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        \tlet r = (d + Math.random()*16)%16 | 0;\n        \td = Math.floor(d/16);\n        \treturn (c=='x' ? r : (r&0x3|0x8)).toString(16);\n        });\n        return uuid;\n\t}\n}\n   "],"sourceRoot":".."}