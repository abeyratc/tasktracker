{"version":3,"sources":["../app/pipes/string-truncate/string-truncate.pipe.spec.ts"],"names":[],"mappings":";AAAA,wCAAmC,2BAA2B,CAAC,CAAA;AAE/D,QAAQ,CAAC,sBAAsB,EAAE;IAChC,IAAI,IAAwB,CAAC;IAE7B,UAAU,CAAC;QACV,IAAI,GAAG,IAAI,4CAAkB,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE;QACtD,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;QACpD,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE;QACxD,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,+CAA+C,EAAE,EAAE,CAAC,CAAC;QACjF,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAAE;QACnE,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,+CAA+C,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;QACrF,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gEAAgE,EAAE;QACpE,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,+CAA+C,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAC3F,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4DAA4D,EAAE;QAChE,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,+CAA+C,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;QACrF,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,mDAAmD,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oFAAoF,EAAE;QACxF,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,+CAA+C,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAC3F,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","file":"string-truncate.pipe.spec.js","sourcesContent":["import { StringTruncatePipe } from './string-truncate.pipe.js';\n\ndescribe('string truncate pipe', () => {\n\tlet pipe: StringTruncatePipe;\n\n\tbeforeEach(() => {\n\t\tpipe = new StringTruncatePipe();\n\t});\n\n\tit('string does not truncate for string length < 25 ', () => {\n\t\tlet result = pipe.transform('testing truncate', []);\n\t\texpect(result).toBe('testing truncate');\n\t});\n\n\tit('string truncates correctly for string length > 25 ', () => {\n\t\tlet result = pipe.transform('testing truncate with more than 25 characters', []);\n\t\texpect(result).toBe('testing truncate with mor ...');\n\t});\n\n\tit('string truncates correctly for string length > 25 with 1 arg ', () => {\n\t\tlet result = pipe.transform('testing truncate with more than 25 characters', ['10']);\n\t\texpect(result).toBe('testing tr ...');\n\t});\n\n\tit('string truncates correctly for string length > 25 with 2 args ', () => {\n\t\tlet result = pipe.transform('testing truncate with more than 25 characters', ['10', '25']);\n\t\texpect(result).toBe('uncate with mor ...');\n\t});\n\n\tit('string truncates to default for 1st limit > string length ', () => {\n\t\tlet result = pipe.transform('testing truncate with more than 25 characters', ['55']);\n\t\texpect(result).toBe('testing truncate with more than 25 characters ...');\n\t});\n\n\tit('string truncates to default for string length > 25  and 2nd limit < string length ', () => {\n\t\tlet result = pipe.transform('testing truncate with more than 25 characters', ['10', '55']);\n\t\texpect(result).toBe('testing truncate with mor ...');\n\t});\n});"],"sourceRoot":"../.."}