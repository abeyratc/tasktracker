{"version":3,"sources":["../app/tasks/task.service.ts"],"names":[],"mappings":"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","file":"task.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Headers, Http, RequestOptions, Response } from '@angular/http';\n\nimport { Observable }     from 'rxjs/Observable';\n\nimport { Task, Status } from '../tasks/task';\nimport { TASKS } from '../tasks/mock-task';\n\nimport { httpHeaders } from '../global.constants'\n\n@Injectable()\nexport class TaskService {\n\n    private taskUrl = '/api/tasks/123'\n\n    constructor(private http: Http) {}\n\n    getTasks(): Promise<Task[]> { \n    \tconsole.log(\"[TaskService][getTasks]\")\n\n\t\tlet loginData = {\n\t\t\t\"username\" : \"un\",\n\t\t\t\"password\": \"pw\",\n\t\t\t\"apiKey\": \"123\",\n\t\t\t\"devicePrint\": \"ert\"\n\t\t};\n\t\tlet body = JSON.stringify(loginData);\n\n\t\tlet headers = new Headers(httpHeaders);\n\t\t\t\n\t\tlet options = new RequestOptions({ headers: headers });\n\n\t\treturn this.http.post(this.taskUrl, body, options)\n\t\t\t\t.toPromise()\n\t\t\t\t.then(this.extractData)\n\t\t\t\t.catch(this.handleError);\n\t}\n\t\n\tprivate extractData(res: Response) {\n\t\tlet tasks: Task[] = [];\n\t\tlet body = res.json();\n\t\tif(body.length > 0) {\n\t\t\tbody.forEach((k:any) => {\n\t\t\ttasks.push({\n\t\t\t\t\tid: k.id,\n\t\t\t\t\tname: k.name,\n\t\t\t\t\tdescription: k.description,\n\t\t\t\t\tstatus: (k.status.toString() === \"READY\")? Status.Ready : (k.status.toString() === \"INPROGRESS\") ? Status.Inprogress : Status.Finished,\n\t\t\t\t\tstartDate: new Date(k.startDate),\n\t\t\t\t\tduration: k.duration,\n\t\t\t\t\tnotes: k.notes\n\t\t\t\t});\n\t\t\t});\n\t\t}\t\n\t\treturn tasks;\n\t}\n\n\tprivate handleError (error: Response | any) {\n\t\t// In a real world app, we might use a remote logging infrastructure\n\t\tlet errMsg: string;\n\t\tif (error instanceof Response) {\n\t\t\tconst body = error.json() || '';\n\t\t\tconst err = body.error || JSON.stringify(body);\n\t\t\terrMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n\t\t} else {\n\t\t\terrMsg = error.message ? error.message : error.toString();\n\t\t}\n\t\tconsole.error(errMsg);\n\t\treturn Observable.throw(errMsg);\n\t}\n}"],"sourceRoot":".."}